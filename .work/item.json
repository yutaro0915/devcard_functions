{
  "feature_name": "PrivateCard機能とSavedCard統合: 統一された更新検知アーキテクチャ",
  "status": "ready-for-review",
  "api_changes": [
    {
      "path": "updatePrivateCard",
      "method": "Callable Function",
      "change_type": "add-endpoint",
      "breaking": false,
      "details": "個人連絡先マスター（displayName, photoURL, email, phoneNumber, lineId, discordId, twitterHandle, otherContacts）を /private_cards/{userId} に保存。部分更新対応。何か一つでも変更されたら updatedAt を必ず更新。",
      "reason": "PrivateCard機能（個人連絡先交換）を実現。本人のみが編集可能なマスターデータ。要件4.3対応。"
    },
    {
      "path": "getPrivateCard",
      "method": "Callable Function",
      "change_type": "add-endpoint",
      "breaking": false,
      "details": "認証済みユーザー自身のPrivateCardマスターを /private_cards/{userId} から取得。",
      "reason": "ユーザーが自分の連絡先情報を確認・編集するため。"
    },
    {
      "path": "savePrivateCard",
      "method": "Callable Function",
      "change_type": "add-endpoint",
      "breaking": false,
      "details": "1分間有効なトークンを検証後、相手のPrivateCardを /users/{userId}/saved_cards/{randomId} に保存。cardType='private'、lastKnownUpdatedAt に相手の updatedAt を記録。",
      "reason": "リアルで会った人とPrivateCardを安全に交換する機能。トークン検証で安全性担保。"
    },
    {
      "path": "deleteSavedCard",
      "method": "Callable Function",
      "change_type": "add-endpoint",
      "breaking": false,
      "details": "保存済みの名刺（PublicまたはPrivate）を savedCardId で削除。本人のsaved_cardsのみ削除可能。",
      "reason": "不要になった名刺を整理するため。"
    },
    {
      "path": "markAsViewed",
      "method": "Callable Function",
      "change_type": "add-endpoint",
      "breaking": false,
      "details": "名刺を表示した際に呼び出し、lastViewedAt と lastKnownUpdatedAt を更新。マスターの最新 updatedAt を記録することで、次回 getSavedCards 時に hasUpdate=false になる。PublicもPrivateも同じロジック。",
      "reason": "更新検知の既読処理。「最新版があります！」バッジを消すため。"
    },
    {
      "path": "saveCard",
      "method": "Callable Function",
      "change_type": "change-field-type",
      "breaking": false,
      "details": "SavedCardのドキュメントIDを {cardUserId} から {randomId} に変更。cardType='public' を設定。lastKnownUpdatedAt に相手の PublicCard.updatedAt を記録。同じユーザーのPublicとPrivate両方を保存可能に。",
      "reason": "SavedCard統合アーキテクチャへの移行。更新検知の基盤整備。"
    },
    {
      "path": "getSavedCards",
      "method": "Callable Function",
      "change_type": "add-field",
      "breaking": true,
      "details": "リクエストに limit, cardType を追加。レスポンスに savedCardId, cardType, hasUpdate, lastViewedAt, lastKnownUpdatedAt を追加。hasUpdate は lastKnownUpdatedAt < master.updatedAt で判定（PublicもPrivateも統一）。PublicとPrivateで条件付きフィールドを返す。常に最新のマスターを参照。",
      "reason": "PublicとPrivate混在の名刺一覧を効率的に取得。統一された更新検知ロジックの実現。何か一つでも変更があったら必ず通知。"
    },
    {
      "path": "updateProfile",
      "method": "Callable Function",
      "change_type": "change-validation",
      "breaking": false,
      "details": "内部的に /users/{userId}, /public_cards/{userId}, /private_cards/{userId} の3箇所を同時更新。displayName, photoURL を同期。トランザクション処理で原子性担保。何か一つでも変更されたら3箇所すべての updatedAt を更新。",
      "reason": "各カードが自己完結する設計（displayName/photoURLを各マスターに保持）。更新検知の基盤整備。"
    },
    {
      "path": "manualSync",
      "method": "Callable Function",
      "change_type": "change-validation",
      "breaking": false,
      "details": "GitHub情報同期時、connectedServices 更新と同時に PublicCard.updatedAt を必ず更新。これにより SavedCard の更新検知が機能する。",
      "reason": "GitHub同期でリポジトリ追加などがあった際、保存している人に「最新版があります！」を通知するため。"
    }
  ],
  "security_notes": [
    "認証必須：すべてのPrivateCard関連APIでFirebase Auth認証が必要",
    "認可：自分自身のPrivateCardのみ操作可能（他人のPrivateCardは直接取得不可）",
    "認可：自分のsaved_cardsのみアクセス可能（他人の保存名刺は見えない）",
    "PII保護：個人連絡先情報（email, phoneNumber）をログに出力しない（マスキング必須）",
    "Security Rules：/private_cards/{userId} は本人のみ読み書き可に設定",
    "Security Rules：/users/{userId}/saved_cards は本人のみ読み書き可に設定",
    "トークン検証：savePrivateCard時にトークンの有効期限（1分）、使用状況、所有者を厳格にチェック",
    "トークン使い捨て：1つのトークンは1回のみ使用可能、使用後は usedBy フィールドで無効化",
    "自己使用禁止：トークン所有者が自分のトークンを使用できないように制御",
    "バリデーション：メールアドレス形式、文字列長制限を実施（DoS攻撃防止）",
    "トランザクション：updateProfile時の3箇所同時更新で原子性を担保（失敗時ロールバック）",
    "updatedAt厳格化：何か一つでも変更されたら必ず updatedAt を更新（更新検知の正確性担保）",
    "削除済み処理：PrivateCard削除時は isDeleted フラグで安全に処理（エラーにしない）"
  ],
  "tests_required": [
    "成功系：有効な連絡先情報でPrivateCardが作成される",
    "成功系：既存のPrivateCardが正しく更新され、updatedAtが更新される",
    "成功系：部分更新が正しく動作し、updatedAtが更新される",
    "成功系：自分のPrivateCardが正しく取得できる",
    "成功系：PrivateCardが存在しない場合、nullまたは初期状態を返す",
    "成功系：PublicCardとPrivateCardの両方を同じユーザーから保存できる",
    "成功系：getSavedCardsでcardType='public'フィルタが動作",
    "成功系：getSavedCardsでcardType='private'フィルタが動作",
    "成功系：getSavedCardsでeventIdフィルタが動作",
    "成功系：getSavedCardsでlimit指定が動作",
    "成功系：SavedCardが常に最新のPublicCard/PrivateCardを参照する",
    "成功系：更新検知ロジック - マスターのupdatedAtが新しい場合 hasUpdate=true",
    "成功系：更新検知ロジック - lastKnownUpdatedAt が未設定の場合 hasUpdate=true",
    "成功系：更新検知ロジック - マスターのupdatedAtが同じ場合 hasUpdate=false",
    "成功系：更新検知ロジック - PublicもPrivateも同じロジックで動作",
    "成功系：markAsViewed でlastViewedAtとlastKnownUpdatedAtが更新される",
    "成功系：markAsViewed 後、次回getSavedCardsでhasUpdate=falseになる",
    "成功系：updateProfileがPublicCardとPrivateCardを同時更新し、両方のupdatedAtが更新される",
    "成功系：updateProfile時のトランザクションが正常に完了",
    "成功系：manualSync時にPublicCard.updatedAtが更新される",
    "成功系：GitHub同期後、保存している人のgetSavedCardsでhasUpdate=trueになる",
    "成功系：有効なトークンでPrivateCardが保存され、lastKnownUpdatedAtが記録される",
    "成功系：savePrivateCard後、相手がPrivateCardを更新したらhasUpdate=trueになる",
    "成功系：deleteSavedCardで名刺が削除される",
    "失敗系：未ログイン時に unauthenticated エラー",
    "失敗系：全フィールド未指定で invalid-argument エラー（updatePrivateCard）",
    "失敗系：emailが無効な形式で invalid-argument エラー",
    "失敗系：文字列が最大長を超えて invalid-argument エラー",
    "失敗系：tokenIdが未指定で invalid-argument エラー（savePrivateCard）",
    "失敗系：トークンが存在しない場合 not-found エラー",
    "失敗系：トークンが期限切れ（1分超過）で invalid-argument エラー",
    "失敗系：トークンが使用済み（usedByが設定済み）で invalid-argument エラー",
    "失敗系：自分のトークンを使用しようとして invalid-argument エラー",
    "失敗系：limitが範囲外（0以下、500超過）で invalid-argument エラー（getSavedCards）",
    "失敗系：cardTypeが不正な値で invalid-argument エラー",
    "失敗系：savedCardIdが未指定で invalid-argument エラー（deleteSavedCard, markAsViewed）",
    "失敗系：存在しないsavedCardIdで not-found エラー",
    "失敗系：他人のsavedCardを削除しようとして permission-denied エラー",
    "失敗系：他人のsavedCardをmarkAsViewedしようとして permission-denied エラー",
    "失敗系：updateProfile時のトランザクション失敗でロールバック",
    "セキュリティ：他人のPrivateCardを直接取得しようとしても不可",
    "セキュリティ：個人連絡先情報（email, phoneNumber）がログに出力されない",
    "セキュリティ：Security Rulesで /private_cards/{userId} が保護されている",
    "セキュリティ：Security Rulesで /users/{userId}/saved_cards が保護されている"
  ],
  "client_work_items": [
    "iOS: 設定画面に「個人連絡先編集」画面を追加（updatePrivateCard, getPrivateCard使用）",
    "iOS: getSavedCardsの新しいレスポンス形式に対応（savedCardId, cardType, hasUpdate, lastViewedAt, lastKnownUpdatedAt）",
    "iOS: 名刺一覧で hasUpdate=true の場合「最新版があります！」バッジを表示",
    "iOS: 名刺詳細表示時に markAsViewed を呼び出してバッジを消す",
    "iOS: 名刺一覧でPublicとPrivateを区別して表示（cardTypeで分岐）",
    "iOS: PrivateCard交換フロー実装（QRコード/AirDrop でトークン送受信、savePrivateCard呼び出し）",
    "iOS: 名刺削除機能追加（deleteSavedCard使用、スワイプ削除など）",
    "iOS: isDeleted=true の場合「この名刺は削除されました」と表示",
    "Web: 設定ページに「個人連絡先編集」フォームを追加",
    "Web: getSavedCardsの新しいレスポンス形式に対応",
    "Web: 名刺一覧で hasUpdate=true の場合「最新版があります！」バッジを表示",
    "Web: 名刺詳細表示時に markAsViewed を呼び出してバッジを消す",
    "Web: 名刺一覧でPublicとPrivateを区別して表示",
    "Web: 名刺削除機能追加",
    "共通: エラーハンドリング（unauthenticated, invalid-argument, not-found, permission-denied）",
    "共通: cardTypeによる表示分岐の実装（TypeScript型ガード推奨）",
    "共通: 条件付きフィールドの型定義（PublicとPrivateで異なるフィールド）",
    "共通: ページネーション実装（limit=100でバッチ取得、無限スクロールなど）",
    "共通: 更新検知ロジックのUI実装（hasUpdateバッジの表示・非表示）",
    "共通: markAsViewed のタイミング設計（詳細画面表示時、スクロールで表示時など）"
  ],
  "breaking_changes": true,
  "notes_for_frontend": "【重要な破壊的変更】getSavedCardsのレスポンス構造が大幅に変更されました。\n\n1. 新規フィールド追加:\n   - savedCardId: 名刺削除時に使用\n   - cardType: 'public' | 'private' で表示を分岐\n   - hasUpdate: 更新バッジ表示用（PublicもPrivateも同じロジック）\n   - lastViewedAt: 最後に表示した時刻\n   - lastKnownUpdatedAt: 最後に知っている相手のupdatedAt\n\n2. 更新検知の仕組み:\n   - 相手がカードを更新（GitHub同期、プロフィール変更、連絡先変更など）すると master.updatedAt が更新される\n   - getSavedCards時に lastKnownUpdatedAt < master.updatedAt なら hasUpdate=true\n   - PublicもPrivateも完全に同じロジック\n   - 名刺詳細を表示したら markAsViewed を呼び出し、lastKnownUpdatedAt を最新に更新\n   - 次回 getSavedCards で hasUpdate=false になる\n\n3. 条件付きフィールド:\n   - cardType='public' の場合: bio, connectedServices, theme, customCss が含まれる\n   - cardType='private' の場合: email, phoneNumber, lineId, discordId, twitterHandle, otherContacts が含まれる\n   - TypeScript型ガードで分岐を推奨\n\n4. SavedCardは常に最新のマスターを参照:\n   - スナップショットは保存しない\n   - GitHubで新しいリポジトリを作成したら即座に反映される\n   - 相手が連絡先を更新したら即座に反映される（hasUpdateで通知）\n\n5. マイグレーション:\n   - 既存データには cardType='public' が自動追加される\n   - 既存の保存済み名刺は引き続き動作\n\n6. 同じユーザーのPublicとPrivate両方を保存可能:\n   - savedCardIdがランダムIDに変更されたため\n   - 例: Aさんの PublicCard（GitHub情報）と PrivateCard（連絡先）両方保存\n\n7. 新規API:\n   - markAsViewed: 名刺表示時に呼び出してバッジを消す\n   - deleteSavedCard: 名刺削除\n   - updatePrivateCard: 個人連絡先編集\n   - getPrivateCard: 自分の連絡先取得\n   - savePrivateCard: トークンでPrivateCard交換\n\nフロントエンド実装の優先順位:\n1. getSavedCards の新しいレスポンス対応（破壊的変更）\n2. hasUpdate バッジ表示\n3. markAsViewed 呼び出し\n4. PrivateCard編集画面\n5. PrivateCard交換フロー",
  "backend_commit_sha": null
}
