openapi: 3.0.3

info:
  title: DevCard API
  version: 0.2.0
  description: |
    DevCard バックエンドAPI仕様

    **注意**: この仕様は段階的に拡張されます。
    詳細は API_CONTRACT.md および CHANGELOG.md を参照してください。

servers:
  - url: https://us-central1-dev-card-ae929.cloudfunctions.net
    description: Production (Firebase Cloud Functions)
  - url: http://localhost:5001/dev-card-ae929/us-central1
    description: Local Emulator

paths:
  /saveGitHubToken:
    post:
      summary: GitHubアクセストークンを保存
      description: GitHubのOAuthアクセストークンをユーザープロフィールに保存します
      operationId: saveGitHubToken
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accessToken
              properties:
                accessToken:
                  type: string
                  description: GitHub OAuth access token
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /saveCard:
    post:
      summary: 名刺を保存
      description: |
        他ユーザーの公開名刺を自分のコレクションに保存します。

        **v0.2.0での変更点**:
        - savedCardIdをランダムID生成（以前はcardUserId固定）
        - lastKnownUpdatedAtを保存（更新検知用）
        - すでに保存済みの名刺でもエラーにならず新規作成
      operationId: saveCard
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cardUserId
              properties:
                cardUserId:
                  type: string
                  description: 保存する名刺の持ち主のuserId
                memo:
                  type: string
                  description: メモ（任意）
                tags:
                  type: array
                  items:
                    type: string
                  description: タグ（任意）
                eventId:
                  type: string
                  description: イベントID（任意）
                badge:
                  type: string
                  description: バッジ（任意、例："VIP", "Speaker"）
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  savedCardId:
                    type: string
                    description: 生成されたランダムID
                  savedCard:
                    $ref: '#/components/schemas/SavedCard'
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 公開名刺が見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /updateProfile:
    post:
      summary: プロフィール更新
      description: |
        ユーザーが自分のプロフィール情報を更新します。
        /users、/public_cards、/private_cards（存在する場合）の3箇所がトランザクションで同期更新されます。

        **v0.2.0での変更点**:
        - PrivateCardの同期更新を追加（displayName, photoURL）
        - Firestoreトランザクションで原子性を担保
      operationId: updateProfile
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  description: 表示名（任意）
                  minLength: 1
                  maxLength: 100
                bio:
                  type: string
                  description: 自己紹介文（任意）
                  maxLength: 500
                photoURL:
                  type: string
                  format: uri
                  description: プロフィール写真URL（任意、HTTPS必須）
                  pattern: '^https://.+'
              minProperties: 1
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 不正なリクエスト（全フィールド未指定、型エラー、バリデーションエラー）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: ユーザーまたは公開名刺が見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /getPublicCard:
    post:
      summary: 公開名刺を取得
      description: 公開名刺（PublicCard）を取得します。認証不要で誰でも閲覧可能。
      operationId: getPublicCard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: 取得したい名刺の持ち主のuserId
                  minLength: 1
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  publicCard:
                    $ref: '#/components/schemas/PublicCard'
        '400':
          description: 不正なリクエスト（userId が空文字列、null、undefined等）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 公開名刺が見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /getSavedCards:
    post:
      summary: 保存した名刺一覧を取得
      description: |
        保存した名刺の一覧を、公開名刺/プライベート名刺の詳細情報と共に取得します。

        **⚠️ v0.2.0での破壊的変更**:
        - レスポンス構造が大幅に変更されました
        - savedCardId（ランダムID）、cardType、hasUpdate、lastKnownUpdatedAt、lastViewedAtを追加
        - cardTypeに応じた条件付きフィールド（Public/Private）
        - フィルタリングオプション追加（cardType, eventId, limit）
      operationId: getSavedCards
      security:
        - firebaseAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                cardType:
                  type: string
                  enum:
                    - public
                    - private
                  description: 名刺タイプでフィルタリング（任意）
                eventId:
                  type: string
                  description: イベントIDでフィルタリング（任意）
                limit:
                  type: integer
                  minimum: 1
                  maximum: 500
                  description: 取得件数の上限（任意、デフォルト100）
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  savedCards:
                    type: array
                    items:
                      $ref: '#/components/schemas/SavedCardWithDetails'
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /manualSync:
    post:
      summary: 外部サービスの手動同期
      description: |
        保存済みの外部サービストークンを使用して、サービスの最新情報を公開名刺に手動で同期します。
        現在はGitHub基本情報（username, name, avatarUrl, bio, profileUrl）のみ対応。

        **v0.2.0での変更点**:
        - 同期成功時のみ PublicCard.updatedAt を更新（エラー時は更新しない）
        - これにより保存済み名刺の更新検知（hasUpdate）が正しく機能します
      operationId: manualSync
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - services
              properties:
                services:
                  type: array
                  items:
                    type: string
                    enum:
                      - github
                  description: 同期するサービスのリスト
                  minItems: 1
                  example: ["github"]
      responses:
        '200':
          description: 成功（部分成功を含む）
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - syncedServices
                properties:
                  success:
                    type: boolean
                    example: true
                  syncedServices:
                    type: array
                    items:
                      type: string
                    description: 成功した同期のリスト
                    example: ["github"]
                  errors:
                    type: array
                    items:
                      type: object
                      required:
                        - service
                        - error
                      properties:
                        service:
                          type: string
                          description: エラーが発生したサービス名
                          example: "github"
                        error:
                          type: string
                          enum:
                            - token-not-found
                            - token-expired
                            - api-error
                          description: |
                            エラーの種類:
                            - token-not-found: トークンが保存されていない
                            - token-expired: トークンの有効期限切れ
                            - api-error: 外部APIエラー
                    description: 同期エラーのリスト（任意）
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: ユーザーまたは公開名刺が見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /updatePrivateCard:
    post:
      summary: プライベート名刺を更新
      description: |
        ユーザーが自分のプライベート連絡先情報を更新します。
        プライベート名刺が存在しない場合は自動的に作成されます。
      operationId: updatePrivateCard
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 255
                  description: メールアドレス（任意）
                phoneNumber:
                  type: string
                  maxLength: 50
                  description: 電話番号（任意）
                lineId:
                  type: string
                  maxLength: 100
                  description: LINE ID（任意）
                discordId:
                  type: string
                  maxLength: 100
                  description: Discord ID（任意）
                twitterHandle:
                  type: string
                  maxLength: 15
                  pattern: '^@?[A-Za-z0-9_]{1,15}$'
                  description: |
                    X (Twitter) ハンドル（任意、@付きでも可）
                    - 入力: @付きでも可（例: @username または username）
                    - 保存: @なしで正規化（Twitter公式仕様に準拠）
                    - 1-15文字、英数字とアンダースコアのみ
                  example: 'username'
                otherContacts:
                  type: string
                  maxLength: 500
                  description: その他の連絡先（任意）
              minProperties: 1
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /getPrivateCard:
    post:
      summary: プライベート名刺を取得
      description: |
        ユーザーが自分のプライベート名刺を取得します。
        プライベート名刺が存在しない場合はnullを返します。
      operationId: getPrivateCard
      security:
        - firebaseAuth: []
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  privateCard:
                    oneOf:
                      - $ref: '#/components/schemas/PrivateCard'
                      - type: 'null'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /savePrivateCard:
    post:
      summary: プライベート名刺を保存
      description: |
        トークンを使用して他ユーザーのプライベート名刺を保存します。
        トークンは1分間有効で、1回限り使用可能です。
      operationId: savePrivateCard
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tokenId
              properties:
                tokenId:
                  type: string
                  description: プライベート名刺交換用トークンID
                memo:
                  type: string
                  description: メモ（任意）
                tags:
                  type: array
                  items:
                    type: string
                  description: タグ（任意）
                eventId:
                  type: string
                  description: イベントID（任意）
                badge:
                  type: string
                  description: バッジ（任意）
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  savedCardId:
                    type: string
                    description: 生成されたランダムID
                  savedCard:
                    $ref: '#/components/schemas/SavedCard'
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: トークンエラー（invalid-token, expired-token, token-already-used, own-token）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: プライベート名刺が見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /markAsViewed:
    post:
      summary: 名刺を閲覧済みにマーク
      description: |
        保存済み名刺を閲覧済みにマークし、更新通知をクリアします。
        lastViewedAtとlastKnownUpdatedAtが更新され、hasUpdateがfalseになります。
      operationId: markAsViewed
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - savedCardId
              properties:
                savedCardId:
                  type: string
                  description: 保存済み名刺のID
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 保存済み名刺が見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /deleteSavedCard:
    post:
      summary: 保存済み名刺を削除
      description: |
        保存済み名刺を削除します。
        マスターデータ（PublicCard/PrivateCard）は削除されず、保存済みリストからのみ削除されます。
      operationId: deleteSavedCard
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - savedCardId
              properties:
                savedCardId:
                  type: string
                  description: 削除する保存済み名刺のID
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 保存済み名刺が見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    SuccessResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          example: true

    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: エラーコード
          enum:
            - unauthenticated
            - permission-denied
            - not-found
            - already-exists
            - invalid-argument
            - internal
        message:
          type: string
          description: エラーメッセージ
        details:
          type: object
          description: 追加の詳細情報（任意）

    ConnectedService:
      type: object
      required:
        - serviceName
        - username
        - profileUrl
      properties:
        serviceName:
          type: string
          description: サービス名
          enum:
            - github
            - qiita
            - zenn
            - x
        username:
          type: string
          description: ユーザー名
        profileUrl:
          type: string
          format: uri
          description: プロフィールURL
        avatarUrl:
          type: string
          format: uri
          description: アバターURL（任意）
        bio:
          type: string
          description: 自己紹介（任意）
        stats:
          type: object
          additionalProperties: true
          description: サービス固有の統計情報（任意）

    PublicCard:
      type: object
      required:
        - userId
        - displayName
        - connectedServices
        - theme
        - updatedAt
      properties:
        userId:
          type: string
          description: ユーザーID
        displayName:
          type: string
          description: 表示名
        photoURL:
          type: string
          format: uri
          description: プロフィール画像URL（任意）
        bio:
          type: string
          description: 自己紹介（任意）
        connectedServices:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConnectedService'
          description: 連携サービス
        theme:
          type: string
          description: テーマ
          default: default
        customCss:
          type: string
          description: カスタムCSS（サニタイズ済み、任意）
        updatedAt:
          type: string
          format: date-time
          description: 更新日時

    SavedCard:
      type: object
      required:
        - savedCardId
        - cardUserId
        - cardType
        - savedAt
      properties:
        savedCardId:
          type: string
          description: 保存済み名刺のランダムID
        cardUserId:
          type: string
          description: 保存した名刺の持ち主のuserId
        cardType:
          type: string
          enum:
            - public
            - private
          description: 名刺タイプ
        savedAt:
          type: string
          format: date-time
          description: 保存日時
        lastKnownUpdatedAt:
          type: string
          format: date-time
          description: 最後に把握している更新日時（任意）
        lastViewedAt:
          type: string
          format: date-time
          description: 最後に閲覧した日時（任意）
        memo:
          type: string
          description: メモ（任意）
        tags:
          type: array
          items:
            type: string
          description: タグ（任意）
        eventId:
          type: string
          description: イベントID（任意）
        badge:
          type: string
          description: バッジ（任意）

    SavedCardWithDetails:
      allOf:
        - $ref: '#/components/schemas/SavedCard'
        - type: object
          required:
            - displayName
            - hasUpdate
          properties:
            displayName:
              type: string
              description: 表示名
            photoURL:
              type: string
              format: uri
              description: プロフィール画像URL（任意）
            hasUpdate:
              type: boolean
              description: 更新があるかどうか（更新検知フラグ）
            bio:
              type: string
              description: 自己紹介（Public名刺のみ、任意）
            connectedServices:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/ConnectedService'
              description: 連携サービス（Public名刺のみ、任意）
            theme:
              type: string
              description: テーマ（Public名刺のみ、任意）
            customCss:
              type: string
              description: カスタムCSS（Public名刺のみ、任意）
            email:
              type: string
              format: email
              description: メールアドレス（Private名刺のみ、任意）
            phoneNumber:
              type: string
              description: 電話番号（Private名刺のみ、任意）
            lineId:
              type: string
              description: LINE ID（Private名刺のみ、任意）
            discordId:
              type: string
              description: Discord ID（Private名刺のみ、任意）
            twitterHandle:
              type: string
              maxLength: 15
              pattern: '^[A-Za-z0-9_]{1,15}$'
              description: X (Twitter) ハンドル（Private名刺のみ、@なし正規化済み、任意）
              example: 'username'
            otherContacts:
              type: string
              description: その他の連絡先（Private名刺のみ、任意）

    User:
      type: object
      required:
        - userId
        - email
        - displayName
        - createdAt
        - updatedAt
      properties:
        userId:
          type: string
          description: ユーザーID
        email:
          type: string
          format: email
          description: メールアドレス
        displayName:
          type: string
          description: 表示名
        photoURL:
          type: string
          format: uri
          description: プロフィール画像URL（任意）
        githubAccessToken:
          type: string
          description: GitHubアクセストークン（非公開、任意）
        xAccessToken:
          type: string
          description: Xアクセストークン（非公開、任意）
        qiitaAccessToken:
          type: string
          description: Qiitaアクセストークン（非公開、任意）
        customCss:
          type: string
          description: カスタムCSS下書き（任意）
        createdAt:
          type: string
          format: date-time
          description: 作成日時
        updatedAt:
          type: string
          format: date-time
          description: 更新日時

    PrivateCard:
      type: object
      required:
        - userId
        - displayName
        - updatedAt
      properties:
        userId:
          type: string
          description: ユーザーID
        displayName:
          type: string
          description: 表示名
        photoURL:
          type: string
          format: uri
          description: プロフィール画像URL（任意）
        email:
          type: string
          format: email
          description: メールアドレス（任意）
        phoneNumber:
          type: string
          description: 電話番号（任意）
        lineId:
          type: string
          description: LINE ID（任意）
        discordId:
          type: string
          description: Discord ID（任意）
        twitterHandle:
          type: string
          maxLength: 15
          pattern: '^[A-Za-z0-9_]{1,15}$'
          description: X (Twitter) ハンドル（@なし、正規化済み、任意）
          example: 'username'
        otherContacts:
          type: string
          description: その他の連絡先（任意）
        updatedAt:
          type: string
          format: date-time
          description: 更新日時

    ExchangeToken:
      type: object
      required:
        - tokenId
        - ownerUserId
        - createdAt
        - expiresAt
        - isUsed
      properties:
        tokenId:
          type: string
          description: トークンID
        ownerUserId:
          type: string
          description: トークン所有者のuserId
        createdAt:
          type: string
          format: date-time
          description: 作成日時
        expiresAt:
          type: string
          format: date-time
          description: 有効期限（作成から1分後）
        isUsed:
          type: boolean
          description: 使用済みフラグ

  securitySchemes:
    firebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Firebase Authentication JWT token

        **注意**: Callable Functions利用時は、Firebase SDKが自動的に認証トークンを付与します。
        クライアント側でベアラートークンを手動で設定する必要はありません。

        詳細は API_CONTRACT.md の「認証方法」セクションを参照してください。
